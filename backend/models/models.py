from flask_sqlalchemy import SQLAlchemy
import datetime
from dataclasses import dataclass

db = SQLAlchemy()

@dataclass
class User(db.Model):
    id:int = db.Column(db.Integer, primary_key=True)
    pk:str = db.Column(db.String(150))
    username:str = db.Column(db.String(150),unique=True)
    full_name:str = db.Column(db.String(150))
    is_private:bool = db.Column(db.Boolean, default=False)
    profile_pic_url:str = db.Column(db.Text)
    profile_pic_url_hd:str = db.Column(db.Text)
    is_verified:bool = db.Column(db.Boolean, default=False)
    media_count:int = db.Column(db.BigInteger) 
    follower_count:int = db.Column(db.BigInteger) 
    following_count:int = db.Column(db.BigInteger) 
    biography:str = db.Column(db.Text)
    external_url:str = db.Column(db.Text, nullable=True)
    account_type:int = db.Column(db.BigInteger) 
    is_business:bool = db.Column(db.Boolean, default=False)
    public_email:str = db.Column(db.String(150), nullable=True)
    contact_phone_number:str = db.Column(db.String(150), nullable=True)
    public_phone_country_code:str = db.Column(db.String(150), nullable=True)
    public_phone_number:str = db.Column(db.String(150), nullable=True)
    business_contact_method:str = db.Column(db.String(150), nullable=True)
    business_category_name:str = db.Column(db.String(150), nullable=True)
    category_name:str = db.Column(db.String(150), nullable=True)
    category:str = db.Column(db.String(150), nullable=True)
    address_street:str = db.Column(db.String(150), nullable=True)
    city_id:str = db.Column(db.String(150), nullable=True)
    city_name:str = db.Column(db.String(150), nullable=True)
    latitude:int = db.Column(db.BigInteger, nullable=True)
    longitude:int = db.Column(db.BigInteger, nullable=True)
    zip:str = db.Column(db.String(150), nullable=True)
    instagram_location_id:str = db.Column(db.String(150), nullable=True)
    interop_messaging_user_fbid:str = db.Column(db.String(150), nullable=True)
    created_date: datetime.datetime = db.Column(db.DateTime, default=datetime.datetime.now)
    # followers = db.relationship('Follower', backref='user', lazy=True)
    # followings = db.relationship('Following', backref='user', lazy=True)
    # posts = db.relationship('Post', backref='user', lazy=True)
    # stories = db.relationship('Story', backref='user', lazy=True)

@dataclass
class BioLinks(db.Model):
    id:int = db.Column(db.Integer, primary_key=True)
    pk_user:str = db.Column(db.String(150))
    link_id:str = db.Column(db.String(150))
    url:str = db.Column(db.Text)
    lynx_url:str = db.Column(db.Text)
    link_type:str = db.Column(db.String(150))
    title:str = db.Column(db.String(150))
    is_pinned:bool = db.Column(db.Boolean, default=False)
    open_external_url_with_in_app_browser:bool = db.Column(db.Boolean, default=False)
    created_date: datetime.datetime = db.Column(db.DateTime, default=datetime.datetime.now)

@dataclass
class Follower(db.Model):
    id:int = db.Column(db.Integer, primary_key=True)
    pk:str = db.Column(db.String(150))
    pk_user:str = db.Column(db.String(150))
    username:str = db.Column(db.String(150))
    full_name:str = db.Column(db.String(150))
    profile_pic_url:str = db.Column(db.Text)
    profile_pic_url_hd:str = db.Column(db.Text, nullable=True)
    is_private:bool = db.Column(db.Boolean, default=False, nullable=True)
    created_date: datetime.datetime = db.Column(db.DateTime, default=datetime.datetime.now)

@dataclass
class Following(db.Model):
    id:int = db.Column(db.Integer, primary_key=True)
    pk:str = db.Column(db.String(150))
    pk_user:str = db.Column(db.String(150))
    username:str = db.Column(db.String(150))
    full_name:str = db.Column(db.String(150))
    profile_pic_url:str = db.Column(db.Text)
    profile_pic_url_hd:str = db.Column(db.Text, nullable=True)
    is_private:bool = db.Column(db.Boolean, default=False, nullable=True)
    created_date: datetime.datetime = db.Column(db.DateTime, default=datetime.datetime.now)

@dataclass
class Post(db.Model):
    id:int = db.Column(db.Integer, primary_key=True)
    # user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    pk:str = db.Column(db.String(150))
    id_pk:str = db.Column(db.String(150))
    code:str = db.Column(db.String(150))
    taken_at:str = db.Column(db.String(150))
    media_type:int	= db.Column(db.BigInteger)
    image_versions2:str = db.Column(db.String(150))
    product_type:str = db.Column(db.String(150), nullable= True)
    thumbnail_url:str = db.Column(db.Text, nullable=True)
    location_pk:str = db.Column(db.String(150))
    user_pk:str = db.Column(db.String(150))
    comment_count:int	= db.Column(db.BigInteger)
    comments_disabled:bool = db.Column(db.Boolean, default=False)
    commenting_disabled_for_viewer:bool = db.Column(db.Boolean, default=False)
    like_count:int	= db.Column(db.BigInteger)
    play_count:int	= db.Column(db.BigInteger, nullable=True)
    has_liked:bool = db.Column(db.Boolean, default=False,nullable=True)
    caption_text:str = db.Column(db.Text, nullable=True)
    accessibility_caption:str = db.Column(db.Text, nullable=True)
    usertags:str = db.Column(db.String(150))
    sponsor_tags:str = db.Column(db.String(150))
    video_url:str = db.Column(db.Text, nullable=True)
    view_count:int	= db.Column(db.BigInteger)
    video_duration:int	= db.Column(db.BigInteger)
    title:str = db.Column(db.Text, nullable=True)
    resources:str = db.Column(db.String(150))
    clips_metadata:str = db.Column(db.String(150))
    created_date: datetime.datetime = db.Column(db.DateTime, default=datetime.datetime.now)
    # post_tags: list  # This will hold the list of PostTag objects

    post_tags = db.relationship('PostTag', backref='post', cascade="all, delete-orphan", lazy=True)

@dataclass
class PostTag(db.Model):
    id:int = db.Column(db.Integer, primary_key=True)
    post_id:int = db.Column(db.Integer, db.ForeignKey('post.id'), nullable=False)
    pk:str = db.Column(db.String(150))
    user_pk:str = db.Column(db.String(150))
    media_pk:str = db.Column(db.String(150))
    username:str = db.Column(db.String(150))
    full_name:str = db.Column(db.String(150))
    is_private:bool = db.Column(db.Boolean, default=False, nullable =True)
    profile_pic_url:str = db.Column(db.Text, nullable=True)
    profile_pic_url_hd:str = db.Column(db.Text, nullable=True)
    created_date: datetime.datetime = db.Column(db.DateTime, default=datetime.datetime.now)

@dataclass
class Story(db.Model):
    id:int = db.Column(db.Integer, primary_key=True)
    # user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    pk:str = db.Column(db.String(150))
    id_pk:str = db.Column(db.String(150))
    code:str = db.Column(db.String(150))
    taken_at:str = db.Column(db.String(150))
    media_type:int	= db.Column(db.BigInteger)
    product_type:str = db.Column(db.String(150))
    thumbnail_url:str = db.Column(db.Text, nullable=True)
    user_pk:str = db.Column(db.String(150))
    video_url:str = db.Column(db.Text, nullable=True)
    video_duration:int	= db.Column(db.BigInteger)
    sponsor_tags:str = db.Column(db.String(150))
    mentions:str = db.Column(db.String(150))
    links:str = db.Column(db.String(150))
    hashtags:str = db.Column(db.String(150))
    locations:str = db.Column(db.String(150))
    stickers:str = db.Column(db.String(150))
    medias:str = db.Column(db.String(150))
    created_date: datetime.datetime = db.Column(db.DateTime, default=datetime.datetime.now)

    story_mentions = db.relationship('StoryMention', backref='story', cascade="all, delete-orphan", lazy=True)

@dataclass
class StoryMention(db.Model):
    id:int = db.Column(db.Integer, primary_key=True)
    story_id:int = db.Column(db.Integer, db.ForeignKey('story.id'), nullable=False)
    pk:str = db.Column(db.String(150))
    user_pk:str = db.Column(db.String(150))
    story_pk:str = db.Column(db.String(150))
    username:str = db.Column(db.String(150))
    full_name:str = db.Column(db.String(150))
    is_private:bool = db.Column(db.Boolean, default=False, nullable =True)
    profile_pic_url:str = db.Column(db.Text, nullable=True)
    profile_pic_url_hd:str = db.Column(db.Text, nullable=True)
    created_date: datetime.datetime = db.Column(db.DateTime, default=datetime.datetime.now)
